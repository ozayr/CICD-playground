---
version: 2.1 

commands:
  destroy_stack:
    steps:
      - run: 
          name: Destroy infrstructure on fail
          command: |
            aws cloudformation  delete-stack --stack-name prod-${CIRCLE_WORKFLOW_ID}
          when: on_fail

jobs:
  create_backend_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create backend infra 
          command: |
            aws cloudformation deploy \
            --template-file template.yml \
            --stack-name my-stack
      - run:
          name: get public IP of EC2 instance created
          command: |
            echo "[all]" > inventory
            aws cloudformation describe-stacks --stack-name prod-${CIRCLE_WORKFLOW_ID} --query "Stacks[0].Outputs[0].OutputValue" --output text >> inventory
      - run: yum install -y tar gzip
      - persist_to_workspace:
          root: ./
          paths:
            - ./
      - destroy_stack:
          

  configure_backend_infrastructure:
    docker:
    - image: python:3.7-alpine3.11
    steps:
      - add_ssh_keys:
          fingerprints: [4b:f1:26:7f:1d:41:42:74:00:af:56:b0:10:e8:b0:e8]
      - run: apk add tar gzip
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies ie ansible
          command: | 
            apk add --update ansible 
      - run: 
          name: Configure server using ansible playbook
          command: ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i inventory main.yml
    
  back_end_smoke_test:
    docker:
    - image: alpine:latest
    steps: 
      - run: apk add tar gzip
      - attach_workspace:
          at: ./
      - run: 
          name: simple curl smoke test test backend API
          command: |
            if curl 

        
            
workflows:
  mainWorkflow:
    jobs:
      - create_backend_infrastructure
      - configure_backend_infrastructure:
          requires: 
            - create_backend_infrastructure
      # - back_end_smoke_test:
      #     requires:
      #      - configure_backend_infrastructure

